# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing 'snip' and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js':

  'Console log':
    prefix: 'log'
    body: "console.log($1)"

  'React: componentDidMount() { ... }':
    prefix: 'cdm'
    body: 'componentDidMount() {\n\t${1}\n}${2}'

  'React: componentDidUpdate(pp, ps) { ... }':
    prefix: 'cdu'
    body: 'componentDidUpdate(prevProps, prevState) {\n\t${1}\n}${2}'

  'React: componentWillMount() { ... }':
    prefix: 'cwm'
    body: 'componentWillMount() {\n\t${1}\n}${2}'

  'React: componentWillReceiveProps(np) { ... }':
    prefix: 'cwrp'
    body: 'componentWillReceiveProps(nextProps) {\n\t${1}\n}${2}'

  'React: componentWillUnmount() { ... }':
    prefix: 'cwun'
    body: 'componentWillUnmount() {\n\t${1}\n}${2}'

  'React: componentWillUpdate(np, ns) { ... }':
    prefix: 'cwu'
    body: 'componentWillUpdate(nextProps, nextState) {\n\t${1}\n}${2}'

  'React: static propTypes = { ... }':
    prefix: 'pt'
    body: 'static propTypes = {\n\t${1}: PropTypes.${2:string}\n}'

  'React: static defaultProps = { ... }':
    prefix: 'dp'
    body: 'static defaultProps = {\n\t${1}: ${2:""}\n}'

  'React: state = { ... }':
    prefix: 'st'
    body: 'state = {\n\t${1}: ${2:""}\n}'

  'React: Class.propTypes = { ... }':
    prefix: 'cpt'
    body: '${1}.propTypes = {\n\t${2}: PropTypes.${3:string}\n}'

  'React: class skeleton':
    prefix: 'rc'
    body: "import React from 'react'\n\nexport default class ${1} extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t${2:<div />}\n\t\t)\n\t}\n\n}"

  'React: Stateless Component':
    prefix: 'rs'
    body: "import React from 'react'\n\nconst ${1} = ({${2}}) => (\n\t<div>${4}</div>\n)\n\n${1}.propTypes = {\n\t${2}: PropTypes.${3}\n}\n\nexport default ${1}"

  'React: Stateless Function':
    prefix: 'rf'
    body: 'const ${1} = ({${2}}) => (\n\t<div>{${2}}</div>\n)'

  'React: render() { return ... }':
    prefix: 'ren'
    body: 'render() {\n\treturn (\n\t\t${1:<div />}\n\t)\n}'

  'React: setState({ ... })':
    prefix: 'ss'
    body: 'this.setState({\n\t${1}: ${2}\n})'

  'React: shouldComponentUpdate(np, ns) { ... }':
    prefix: 'scu'
    body: "import shouldPureComponentUpdate from 'utils/shouldPureComponentUpdate'\n\nshouldComponentUpdate = shouldPureComponentUpdate"

  'React: const { ... } = this.props':
    prefix: 'fp'
    body: 'const { ${1} } = this.props'

  'React: const { ... } = this.state':
    prefix: 'fs'
    body: 'const { ${1} } = this.state'

  'React: PropType string':
    prefix: 'pts',
    body: 'PropTypes.string,'

  'React: PropType number':
    prefix: 'ptn',
    body: 'PropTypes.number,'

  'React: PropType object':
    prefix: 'pto',
    body: 'PropTypes.object,'

  'React: PropType array':
    prefix: 'pta',
    body: 'PropTypes.array,'

  'React: PropType bool':
    prefix: 'ptb',
    body: 'PropTypes.bool,'

  'React: PropType element':
    prefix: 'pte',
    body: 'PropTypes.element,'

  'React: PropType function':
    prefix: 'ptf',
    body: 'PropTypes.func,'
